- const getInputName = (f, property) => `${f.name}[${property}]`

mixin formFor(f, options = {})
  - const url = _.get(options, 'url');
  - const method = _.get(options, 'method', 'get').toLowerCase();
  - const isStandart = _.includes(['get', 'post'], method);
    form(action= url method= isStandart ? method : 'post')
      if !isStandart
        input(name='_method' type='hidden' value= method)
      block

mixin dropdownInput(f, property, text, options = { as: 'text' })
  - const value = f.object[property] === undefined ? '' : f.object[property]
  .form-group(class=(f.errors[property] && 'has-danger'))
    label(class=(text === undefined ? 'sr-only' : ''))= text
    input(name=getInputName(f, property) class='form-control' type=options['as'] value=`${value}`) 
    if f.errors[property]
      .form-control-feedback.text-danger= f.errors[property].map(({ message }) => message).join('. ')

mixin input(f, property, text, options = { as: 'text' })
  - const value = f.object[property] === undefined ? '' : f.object[property]
  .form-group(class=(f.errors[property] && 'has-danger'))
    label.sr-only= property
    input(name=getInputName(f, property) class='form-control' type=options['as'] value=`${value}` placeholder=text autofocus) 
    if f.errors[property]
      .form-control-feedback.text-danger= f.errors[property].map(({ message }) => message).join('. ')

mixin inputArea(f, property, text, rowsForArea, options = { as: 'text' })
  - const value = f.object[property] === undefined ? '' : f.object[property]
  .form-group(class=(f.errors[property] && 'has-danger'))
    label.sr-only= property
    textarea(name=getInputName(f, property) class='form-control' type=options['as'] placeholder=text rows=rowsForArea)= `${value}`
    if f.errors[property]
      .form-control-feedback.text-danger= f.errors[property].map(({ message }) => message).join('. ')

mixin inputSelect(array, text, options = { as: 'text' })
  .form-group
    label(class=(text === undefined ? 'sr-only' : ''))= text
    select(class='form-control' type=options['as']) 
      each element in array
        option= element

mixin button(f, text, isBlock, type = 'submit')
  .form-group
    input(class=(isBlock === 'btn-block' ? 'btn btn-primary btn-block' : 'btn btn-primary') type=`${type}` value=text)
